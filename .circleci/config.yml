# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

commands:
  set_package_name_and_version:
    steps:
      - run:
          name: Set package name and version
          command: |
            python3 .circleci/generate_version.py >> $BASH_ENV
            source $BASH_ENV
            echo "Building hiplot version $HIPLOT_VERSION_PYPI (pypi) / $HIPLOT_VERSION_NPM (npm)"
  attach_built_js:
    steps:
      - attach_workspace:
          at: npm-build
      - attach_workspace:
          at: hiplot/static
  switch_to_dev_bundle:
    steps:
      - run:
          name: Switch to dev bundle
          when: always
          command: |
            . venv/bin/activate
            rm -rf hiplot/static/built/*
            cp -r npm-build/dist-dev/* hiplot/static/built
            pip install --upgrade -e .[dev]
  switch_to_test_bundle:
    steps:
      - run:
          name: Switch to e2e test bundle
          when: always
          command: |
            . venv/bin/activate
            cp hiplot/static/built/hiplot_test.bundle.js hiplot/static/built/hiplot.bundle.js
            pip install --upgrade -e .[dev]
  run_test_e2e:
    parameters:
      browser:
        type: string
      bundle:
        type: string
      wait_secs:
        type: integer
        default: 2
    steps:
      - run:
          name: Generate pages and end to end testing (<< parameters.bundle >>)
          when: always
          command: |
            . venv/bin/activate
            mkdir -p artifacts
            rm -rf .circleci/demo_pages && mkdir .circleci/demo_pages
            PAGES=`python -c "import hiplot.fetchers; print(\"\n\".join(list(hiplot.fetchers.README_DEMOS.keys())))"`
            for p in $PAGES; do echo $p; hiplot-render --format html $p > .circleci/demo_pages/$p.html; done
            WAIT_SECS=<< parameters.wait_secs >> BROWSER=<< parameters.browser >> pytest -s .circleci/test_e2e.py
      - run:
          name: Collect artifacts...
          when: always
          command: mv .circleci/demo_pages artifacts/<< parameters.bundle >>
  test_render_selenium_setup:
    parameters:
      browser:
        type: string
    steps:
      - run: sudo apt-get update -y && sudo apt-get install -y openssh-client git
      - checkout
      - attach_built_js
      - restore_cache:
          keys:
          - v2-e2e-selenium<< parameters.browser >>-dependencies-{{ checksum "requirements/main.txt" }}-{{ checksum "requirements/dev.txt" }}
      - run:
          name: install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install python3-venv git -y
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade -e .[dev]
      - save_cache:
          paths:
            - ./venv
          key: v2-e2e-selenium<< parameters.browser >>-dependencies-{{ checksum "requirements/main.txt" }}-{{ checksum "requirements/dev.txt" }}
  test_render_selenium:
    parameters:
      browser:
        type: string
    steps:
      - test_render_selenium_setup:
          browser: << parameters.browser >>
      - attach_workspace:
          at: examples/javascript
      - run:
          name: Test JS demo examples
          when: always
          command: |
            . venv/bin/activate
            mkdir -p artifacts
            rm -rf .circleci/demo_pages && mv examples/javascript/build_all .circleci/demo_pages
            WAIT_SECS=5 BROWSER=<< parameters.browser >> pytest -s .circleci/test_e2e.py
      - run:
          name: Collect artifacts...
          when: always
          command: mv .circleci/demo_pages artifacts/examples_javascript
      - run_test_e2e:
          browser: << parameters.browser >>
          bundle: provided
      - switch_to_dev_bundle
      - run_test_e2e:
          browser: << parameters.browser >>
          bundle: dev
      - store_artifacts:
          when: always
          path: ~/repo/artifacts
  run_jupyter_test:
    steps:
      - run:
          name: Setup Jupyter notebook
          when: always
          command: |
            . venv/bin/activate
            pip install notebook
      - run:
          name: End to end testing for Jupyter notebook
          when: always
          command: |
            . venv/bin/activate
            jupyter notebook --port=8888 --ip=127.0.0.1 --notebook-dir=.circleci/ &
            sleep 1
            export NOTEBOOK_TOKEN=`jupyter notebook list | grep http | cut -d' ' -f1 | cut -d= -f2`
            echo "Notebook running (pid $!): token = $NOTEBOOK_TOKEN"
            pytest -s .circleci/test_notebook.py
            kill -s 9 $!
      - store_artifacts:
          when: always
          path: ~/repo/artifacts
  pip_build:
    steps:
      - attach_workspace:
          at: hiplot/static
      - run:
          name: install dependencies
          command: |
            apt-get update
            apt-get install python3-venv -y
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/dev.txt
            pip install -r requirements/main.txt
      - run:
          name: Set version and package name
          command: |
            echo "Building hiplot $HIPLOT_VERSION_PYPI"

            # Set version
            git show HEAD:hiplot/pkginfo.py | sed '/Set by CI/d' > hiplot/pkginfo.py
            echo "version = \"$HIPLOT_VERSION_PYPI\"" >> hiplot/pkginfo.py
      - run:
          name: create packages
          command: |
            . venv/bin/activate
            rm -rf dist && mkdir dist pypi-build
            # create a source distribution
            python setup.py sdist
            # create a wheel
            python setup.py bdist_wheel
            mv dist pypi-build
      - run:
          name: verify package
          command: |
            . ./venv/bin/activate
            twine check pypi-build/dist/*
      - run:
          name: test install from wheel
          command: |
            python3 -m venv test_wheel
            . test_wheel/bin/activate
            cd ..
            ls project/pypi-build/dist/
            pip install project/pypi-build/dist/*.whl
            python -c "import hiplot as hip; hip.Experiment"
            python -c "import hiplot as hip; print(hip.__version__)"
            hiplot-render demo --format html > /dev/null
      - run:
          name: test install from sdist
          command: |
            python3 -m venv test_sdist
            . test_sdist/bin/activate
            cd ..
            ls project/pypi-build/dist/
            pip install project/pypi-build/dist/*.tar.gz
            python -c "import hiplot as hip; hip.Experiment"
            hiplot-render demo --format html > /dev/null
      - persist_to_workspace:
          root: pypi-build
          paths: dist
      - store_artifacts:
          when: always
          path: pypi-build
  pypi_deploy:
    steps:
      - attach_workspace:
          at: pypi-build
      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = danthe3rd" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: upload to pypi
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install twine
            du -h pypi-build/dist/*
            twine upload pypi-build/dist/hiplot-*

orbs:
  win: circleci/windows@2.2.0

jobs:
  mypy_pytest:
    docker:
      # specify the version you desire here
      - image: circleci/python:3.7

    working_directory: ~/repo

    steps:
      - checkout
      - attach_workspace:
          at: hiplot/static
      - restore_cache:
          keys:
          - v2-mypy_pytest-dependencies-{{ checksum "requirements/main.txt" }}-{{ checksum "requirements/dev.txt" }}
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install .[dev]
      - save_cache:
          paths:
            - ./venv
          key: v2-mypy_pytest-dependencies-{{ checksum "requirements/main.txt" }}-{{ checksum "requirements/dev.txt" }}
      - run:
          name: "Run mypy"
          when: always
          command: |
            . venv/bin/activate
            mypy --strict --implicit-reexport hiplot
      - run:
          name: Run tests
          when: always
          command: |
            . venv/bin/activate
            pytest hiplot --durations=10

  npm-build:
    docker:
      - image: node:lts-buster
    steps:
      - checkout
      - set_package_name_and_version
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "package-lock.json" }}
            - v1-npm-deps-
      - run: npm install
      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run: mkdir -p npm-build/dist npm-build/dist-dev dist
      - run: npm run build-dev
      - run: mv dist/* npm-build/dist-dev/
      - run: npm run build
      - run: npm run prepublish
      - run: mv dist/* npm-build/dist/ && mkdir -p hiplot/static/built/ && cp npm-build/dist/hiplot.bundle.js hiplot/static/built/
      - run:
          name: Gather NPM package files
          command: |
            mkdir -p npm-package/hiplot
            sed -i "s/\"version\": \"0.0.0\",/\"version\": \"${HIPLOT_VERSION_NPM}\",/" package.json
            cp -r package.json tsconfig.json webpack.config.js README.md LICENSE src npm-build/dist npm-package/hiplot
            rm -rf npm-package/hiplot/dist/hiplot-*  # Leftover from setup.py
      - store_artifacts:
          when: always
          path: npm-build
      - store_artifacts:
          when: always
          path: hiplot/static/built/
      - store_artifacts:
          when: always
          path: npm-package
      - persist_to_workspace:
          root: npm-build
          paths:
            - dist
            - dist-dev
      - persist_to_workspace:
          root: npm-package
          paths:
            - hiplot
      - persist_to_workspace:
          root: hiplot/static
          paths:
            - built

  npm-test:
    docker:
      - image: node:lts-buster
    steps:
      - checkout
      - attach_workspace:
          at: npm-package
      - run:
          name: NPM requirements
          command: |
            cd examples/javascript
            # Remove hiplot requirement, use the one we just built in CI
            sed -i.bak '/"hiplot":/d' ./package.json
            npm install
            npm install ../../npm-package/hiplot
      - run:
          name: Build demos
          command: |
            cd examples/javascript
            mkdir -p build_all
            FUNCTIONS=`cat src/index.js | grep CI_BUILD | cut -d' ' -f2 | cut -d'(' -f1`
            for f in $FUNCTIONS; do
              echo "---------------- BUILDING $f ----------------"
              git show HEAD:./src/index.js | sed "s/HiPlotWithData \//$f \//" > src/index.js
              npm run build
              cp -r build build_all/$f
            done
      - store_artifacts:
          when: always
          path: examples/javascript/build_all
      - persist_to_workspace:
          root: examples/javascript
          paths:
            - build_all

  npm-deploy:
    docker:
      - image: node:lts-buster
    steps:
      - checkout
      - attach_workspace:
          at: npm-package
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run:
          name: Publish
          command: cd npm-package/hiplot && npm publish
      - store_artifacts:
          when: always
          path: npm-package

  browser-jupyter-chrome-dev:
    docker:
      - image: selenium/standalone-chrome
    working_directory: ~/repo
    steps:
      - test_render_selenium_setup:
          browser: chrome
      - switch_to_dev_bundle
      - run_jupyter_test

  browser-jupyter-chrome:
    docker:
      - image: selenium/standalone-chrome
    working_directory: ~/repo
    steps:
      - test_render_selenium_setup:
          browser: chrome
      - run_jupyter_test

  browser-teste2e-chrome:
    docker:
      - image: selenium/standalone-chrome
    parallelism: 4
    working_directory: ~/repo
    steps:
      - test_render_selenium_setup:
          browser: chrome
      - switch_to_dev_bundle
      - switch_to_test_bundle
      - run_test_e2e:
          browser: chrome
          bundle: testdev
          wait_secs: 60
      - store_artifacts:
          when: always
          path: ~/repo/artifacts

  browser-render-chrome:
    docker:
      - image: selenium/standalone-chrome
    working_directory: ~/repo
    steps:
      - test_render_selenium:
          browser: chrome

  browser-render-firefox:
    docker:
      - image: selenium/standalone-firefox
    working_directory: ~/repo
    steps:
      - test_render_selenium:
          browser: firefox

  docs-build:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - attach_built_js
      - attach_workspace:
          at: examples/javascript
      - run: mkdir -p docs/_static/ && mv examples/javascript/build_all docs/_static/examples_javascript
      - run:
          name: install dependencies
          command: |
            apt-get update
            apt-get install python3-venv git -y
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade -e .[dev]
            pip install -U -r requirements/dev.txt
      - run:
          name: Generate HiPlot demos
          command: |
            . venv/bin/activate
            mkdir -p docs/_static/demo/
            PAGES=`python -c "import hiplot.fetchers; print(\"\n\".join(list(hiplot.fetchers.README_DEMOS.keys())))"`
            for p in $PAGES; do echo $p; hiplot-render --format html $p > docs/_static/demo/$p.html; done
      - run:
          name: Generate other demos
          command: |
            . venv/bin/activate
            DATA_PATH="assets/data"
            EXPERIMENTS=`(cd $DATA_PATH && ls)`
            for p in $EXPERIMENTS; do echo $p; hiplot-render --format html $DATA_PATH/$p > docs/_static/demo/$p.html; done
      - run:
          name: Generate HiPlot-upload version
          command: |
            . ./venv/bin/activate
            python -c "from pathlib import Path; import hiplot; Path('docs/_static/hiplot_upload.html').write_text(hiplot.render.make_experiment_standalone_page({'dataProviderName': 'upload'}))"
            cp -r hiplot/static docs/_static/static
      - run: cp hiplot/static/built/hiplot.bundle.js docs/_static/hiplot.bundle.js
      - run:
          name: Build docs
          command: |
            . venv/bin/activate
            cd docs/ && make html
      - persist_to_workspace:
          root: docs/_build
          paths: html
      - store_artifacts:
          when: always
          path: docs/_build/html

  docs-deploy:
    docker:
      - image: node:lts-buster
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "25:76:4d:1b:f0:5b:72:cb:97:43:fd:35:c9:16:85:2c"
      - attach_workspace:
          at: docs/_build
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ci-build"
            git config user.name "ci-build"
      - run:
          name: Deploy docs to gh-pages branch
          command: gh-pages --dotfiles --message "[skip ci] Updates" --dist docs/_build/html

  pypi-build:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - set_package_name_and_version
      - pip_build

  pypi-deploy:
    docker:
      - image: python:3.7
    steps:
      - pypi_deploy

  win-tests:
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - attach_built_js
      - run:
          name: Setup hiplot in virtualenv
          command: |
            py -3 -m venv venv_hiplot
            . ./venv_hiplot/Scripts/activate
            pip install .[dev]
      - run:
          name: pytest
          command: |
            . ./venv_hiplot/Scripts/activate
            pytest hiplot

workflows:
  version: 2
  all_ci:
    jobs:
      - npm-build:
          filters:
            tags:
              only: /.*/
      - npm-test:
          requires:
            - npm-build
          filters:
            tags:
              only: /.*/
      - mypy_pytest:
          requires:
            - npm-build
          filters:
            tags:
              only: /.*/
      - win-tests:
          requires:
            - npm-build
          filters:
            tags:
              only: /.*/
      - browser-render-chrome:
          requires:
            - npm-test
          filters:
            tags:
              only: /.*/
      - browser-teste2e-chrome:
          requires:
            - npm-build
          filters:
            tags:
              only: /.*/
      - browser-jupyter-chrome:
          requires:
            - npm-build
          filters:
            tags:
              only: /.*/
      - browser-jupyter-chrome-dev:
          requires:
            - npm-build
          filters:
            tags:
              only: /.*/
      - browser-render-firefox:
          requires:
            - npm-test
          filters:
            tags:
              only: /.*/
      - docs-build:
          requires:
            - npm-build
            - npm-test
          filters:
            tags:
              only: /.*/
      - pypi-build:
          requires:
            - npm-build
          filters:
            tags:
              only: /.*/
      - docs-deploy:
          requires:
            - docs-build
          filters:
            branches:
              only: master
      - pypi-deploy:
          requires:
            - pypi-build
            - npm-build
            - npm-test
            - docs-build
            - browser-jupyter-chrome
            - browser-jupyter-chrome-dev
            - browser-teste2e-chrome
            - browser-render-chrome
            - browser-render-firefox
            - mypy_pytest
          filters:
            branches:
              only: master
            tags: # Re-deploy master build when pushing a new tag
              only: /(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\.post(0|[1-9][0-9]*))?/
      - npm-deploy:
          requires:
            - pypi-build
            - npm-build
            - npm-test
            - docs-build
            - browser-jupyter-chrome
            - browser-jupyter-chrome-dev
            - browser-teste2e-chrome
            - browser-render-chrome
            - browser-render-firefox
            - mypy_pytest
          filters:
            branches:
              only: master
            tags: # Re-deploy master build when pushing a new tag
              only: /(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\.post(0|[1-9][0-9]*))?/
